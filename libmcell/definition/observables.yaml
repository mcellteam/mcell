
VizOutput:
  superclass: BaseDataClass
  items:
  - name: output_files_prefix
    type: str

  - name: species_list
    type: List[Species*]
    default: empty
    doc: When empty and all_species is false, empty files will be generated
  
  - name: all_species
    type: bool
    default: false
    doc: Visualize all species 
  
  - name: mode
    type: VizMode
    default: VizMode.ASCII
    
  - name: every_n_timesteps
    type: int
    default: 1
    

CountTerm:
  superclass: BaseDataClass
  items:
  - name: species_pattern
    type: ComplexInstance*
    default: unset
    doc: |
      Count the number of molecules that match the given complex instance pattern.
      Counts each molecule exactly once. 
    
  - name: molecules_pattern
    type: ComplexInstance*
    default: unset
    doc: |
     Count the number of matches of the given pattern on molecules.
     The observable will count a molecule every time it matches the pattern.
     When the pattern is symmetric, e.g. as in A(a!1).A(a!1) then a 
     molecule A(a!1).A(a!1,b!2).B(a!2) will be counted twice because the 
     pattern may match in two different ways. 
    
  - name: reaction_rule
    type: ReactionRule*
    default: unset
        
  - name: region
    type: Region*
    default: unset
    doc: | 
      Only a GeometryObject or SurfaceRegion can be passed as the region argument, 
      compound regions (created with +, -, *) are not supproted yet.   
    
  - name: orientation
    type: Orientation
    default: Orientation.NOT_SET
  
  - name: node_type
    type: ExprNodeType
    default: ExprNodeType.LEAF
    doc: Internal, used to represent an expression
    
  - name: left_node
    type: CountTerm*
    default: unset
    doc: Internal, when node_type is not Leaf, this is the left operand 

  - name: right_node
    type: CountTerm*
    default: unset
    doc: Internal, when node_type is not Leaf, this is the right operand 

  methods:
    # operator overloads follow the Python naming
    - name: __add__
      return_type: CountTerm*
      params:
      - name: op2
        type: CountTerm*
      
    - name: __sub__
      return_type: CountTerm*
      params:
      - name: op2
        type: CountTerm*
    
    
Count:
  superclass: CountTerm
  items:
  - name: file_name
    type: str
    
  - name: count_expression 
    type: CountTerm*
    default: unset
    doc: | 
      The count expression must be composed only from CountTerm objects that are added or 
      subtracted.  

  - name: multiplier
    type: float
    default: 1
    doc: |
      In some cases it might be useful to multiply the whole count by a constant to get 
      for instance concentration. The count_expression is not an arbitrary expression
      and such multiplication can be done through this attribute.  
      
  - name: every_n_timesteps
    type: int
    default: 1
      
 
Observables:
  doc: |
    Neither VizOutput, nor Count have name, therefore there are no find_* methods.
    
  items:
  - name: viz_outputs
    type: List[VizOutput*]
    default: empty

  - name: counts
    type: List[Count*]
    default: empty
  
  methods:
  - name: add_viz_output
    params:
    - name: viz_output
      type: VizOutput*
  
  - name: add_count
    params:
    - name: count
      type: Count*
     
  - name: load_bngl_observables
    doc: | 
      Loads section observables from a BNGL file and creates Count objects according to it.
      All elementary molecule types used in the seed species section must be defined in subsystem.
    params:
    - name: file_name
      type: str   
      doc: BNGL file name.
           
    - name: subsystem
      type: Subsystem*

    - name: output_files_prefix
      type: str   
      doc: Prefix to be used for created files with observable values.

    - name: parameter_overrides
      type: Dict[str, float]
      default: empty
     
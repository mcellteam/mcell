
ComponentType:
  superclass: BaseDataClass
  items:
  - name: name
    type: str
    
  - name: states
    type: List[str]
    default: empty
  methods:
  - name: inst
    return_type: Component*
    params:
    - name: state
      type: str
      default: STATE_UNSET
    - name: bond
      type: int
      default: BOND_UNBOUND

  - name: inst
    return_type: Component*
    params:
    - name: state
      type: int
      default: STATE_UNSET_INT
    - name: bond
      type: int
      default: BOND_UNBOUND

  - name: to_bngl_str
    return_type: str
    doc: Creates a string that corresponds to its BNGL representation.
    is_const: true       
      
      
Component:
  superclass: BaseDataClass
  doc: | 
     Instance of a component belonging to a molecule instance.
     A component instance may have its state set.
     It is also used to connect molecule instance in a complex instance.
  items:
  - name: component_type
    type: ComponentType*

  - name: state
    type: str
    default: STATE_UNSET
    
  - name: bond
    type: int
    default: BOND_UNBOUND
          
  methods:    
  - name: to_bngl_str
    return_type: str
    doc: Creates a string that corresponds to its BNGL representation.
    is_const: true 
      
      
ElementaryMoleculeType:
  todo: | 
        How can we share members such as diff const between this class and Species?
        custom_time_step, custom_space_step and target_only are currently supported 
        only when used in Species
  superclass: BaseDataClass
  items:
  - name: name
    type: str
    
  - name: components
    type: List[ComponentType*]
    default: empty

  - name: diffusion_constant_2d
    type: float
    default: unset
    doc: This molecule is constrained to a surface and diffuses with diffusion constant D.
      
  - name: diffusion_constant_3d
    type: float
    default: unset 
    doc: This molecule diffuses in space with diffusion constant D. D can be zero, in which case the molecule doesn’t move. The units of D are cm 2 /s.

  - name: custom_time_step
    type: float
    default: unset 
    doc: This molecule should take timesteps of length t (in seconds). Use either this or custom_time_step.

  - name: custom_space_step
    type: float
    default: unset 
    doc: This molecule should take steps of average length L (in microns). Use either this or custom_time_step.
      
  - name: target_only
    type: bool
    default: False
    doc: |
      This molecule will not initiate reactions when it runs into other molecules. This
      setting can speed up simulations when applied to a molecule at high concentrations 
      that reacts with a molecule at low concentrations (it is more efficient for
      the low-concentration molecule to trigger the reactions). This directive does
      not affect unimolecular reactions.      
      
  methods:
  - name: inst
    return_type: ElementaryMolecule*
    params:
    - name: components
      type: List[Component*]
      default: empty
    - name: compartment_name
      type: str
      default: unset

  - name: to_bngl_str
    return_type: str
    doc: Creates a string that corresponds to its BNGL representation.
    is_const: true 
          
      
ElementaryMolecule:
  superclass: BaseDataClass
  items:
  - name: elementary_molecule_type
    type: ElementaryMoleculeType*
    
  - name: components
    type: List[Component*]
    default: empty

  - name: compartment_name
    type: str
    default: unset
    doc:
       Corresponds to BNGL specification 'EM@COMP'.
       If a 2D/surface compartment is specified, the elementary moelcule must be of surface type.
       If a 3D/volume compartment is specified, the elementary moelcule must be of volume type.

  methods:
  - name: to_bngl_str
    return_type: str
    doc: Creates a string that corresponds to its BNGL representation 
    is_const: true    
    params: 
    - name: with_compartment
      type: bool
      default: true
      doc: Include compartment name in returned BNGL string.
    
    
Complex:    
  superclass: BaseDataClass
  doc: | 
     This class represents a complex molecule composed of molecule instances.
     It is either defined using a BNGL string or using a list of elementary molecule instances.
     On top of that, orientation may be defined.
     This class is used as argument in cases where either a fully qualified instance or a pattern 
     can be provided such as in observable Count.  
     Comparison operator __eq__ first converts complexes to their canonical representation and 
     then does comparison so for instance m.Complex('A(b!1).B(a!1)') == m.Complex('B(a!2).A(b!2)').
     
  internal: | 
     Ctor Species(Complex& cplx_inst) must be updated if if attributes change     
  items:
  - name: name
    type: str
    default: empty
    doc: | 
       When set, this complex instance is initialized from a BNGL string passed as this argument, 
       the string is parsed and elementary_molecules and compartment are initialized.
  
  - name: elementary_molecules
    type: List[ElementaryMolecule*]
    default: empty
    doc: |
       Individual molecule instances contained in the complex.
       This information is used during model initialization.

  - name: orientation
    type: Orientation 
    default: Orientation.DEFAULT
    doc: | 
       Specifies orientation of a molecule. 
       When Orientation.DEFAULT if kept then during model initialization is
       'orientation' set to Orientation.NONE for volume complexes and to 
       Orientation.UP for surface complexes.
       Ignored by derived class Species.
    
  - name: compartment_name
    type: str
    default: unset
    doc: | 
       Specifies compartment name of this Complex.
       Only one of 'orientation' and 'compartment_name' can be set. 
       May be used only when elementary_molecules do not specify a compartment.
       Corresponds to BNGL specification '@COMP\:'.
       If a 2D/surface compartment is specified, the complex must be a surface complex and 
       orientation is set to Orientation.UP.
       If a 3D/volume compartment is specified, the complex must be a volume complex and
       orientation is set to Orientation.NONE. 
       All compartments of surface elementary molecules must be the same.
       All compartments of volume elementary molecules must be from the two neighboring volume compartments.
      
  methods:
  - name: to_bngl_str
    return_type: str
    doc: Creates a string that corresponds to its BNGL representation including compartments.
    is_const: true 
    
  - name: as_species
    return_type: Species*
    doc: | 
       Returns a Species object based on this Complex. All species-specific 
       attributes are set to their default values and 'name' is set to value returned by 
       'to_bngl_str()'.
      
Species:
  superclass: Complex
  TODO: | 
     Ignore orientation when comparing species on equality.
  doc: |
    There are three ways how to use this class\:
    1) definition of simple species - in this case 'name' is 
    a single identifier and at least 'diffusion_constant_2d' or 
    'diffusion_constant_3d' must be provided.
    Example\: m.Species('A', diffusion_constant_3d=1e-6). 
    Such a definition must be added to subsystem or model so that  
    during model initialization this species is transformed to MCell 
    representation and an ElementaryMoleculeType 'A' with a given 
    diffusion constant is created as well.
    2) full definition of complex species - in this case the 
    inherited attribute 'elementary_molecules' from Complex
    is used as a definition of the complex and this gives information 
    on diffusion constants of the used elementary molecules.
    Example\: m.Species(elementary_molecules=[ei1, ei2]). 
    Such a definition must be added to subsystem or model.   
    3) declaration of species - in this case only 'name' in the form of 
    an BNGL string is provided. The complex instance specified by the name 
    must be fully qualified (i.e. all components are present and those 
    components that have a state have their state set).
    No information on diffusion constants and other properties of 
    used elementary molecules is provided, it must be provided elsewhere.
    Example\: m.Species('A(b!1).B(a!1)').
    This is a common form of usage when reaction rules are provided in a BNGL file.
    Such declaration does no need to be added to subsystem or model.
    This form is used as argument in cases where a fully qualified instance  
    must be provided such as in molecule releases. 
    
  items:
  - name: name
    type: str
    default: unset
    doc: | 
       Name of the species in the BNGL format. 
       One must either specify 'name' or 'elementary_molecules' 
       (inherited from Complex). This argument 'name' is parsed during model 
       initialization.    

  - name: diffusion_constant_2d
    type: float
    default: unset
    doc: This molecule is constrained to a surface and diffuses with diffusion constant D.
      
  - name: diffusion_constant_3d
    type: float
    default: unset # the value is optional and might need to be checked with a more complex check
    doc: This molecule diffuses in space with diffusion constant D. D can be zero, in which case the molecule doesn’t move. The units of D are cm 2 /s.
        
  - name: custom_time_step
    type: float
    default: unset 
    doc: This molecule should take timesteps of length t (in seconds). Use either this or custom_time_step.

  - name: custom_space_step
    type: float
    default: unset 
    doc: This molecule should take steps of average length L (in microns). Use either this or custom_time_step.
            
  - name: target_only
    type: bool
    default: False
    doc: |
      This molecule will not initiate reactions when it runs into other molecules. This
      setting can speed up simulations when applied to a molecule at high concentrations 
      that reacts with a molecule at low concentrations (it is more efficient for
      the low-concentration molecule to trigger the reactions). This directive does
      not affect unimolecular reactions.
      
  methods:
  - name: inst
    return_type: Complex*
    doc: | 
       Creates a copy of a Complex from this Species with specified orientation and compartment name. 
    params:
    - name: orientation
      type: Orientation 
      default: Orientation.DEFAULT
      doc: Maximum one of orientation or compartment_name can be set, not both.
      
    - name: compartment_name
      type: str
      default: unset
      doc: Maximum one of orientation or compartment_name can be set, not both.
  
    
SurfaceProperty:
  superclass: BaseDataClass
  items:
  - name: type
    type: SurfacePropertyType
    default: SurfacePropertyType.UNSET
    doc: Must be set.
  
  - name: affected_complex_pattern
    type: Complex*
    default: unset
    doc: | 
       A complex pattern with optional orientation must be set.
       Default orientation means that the pattern matches any orientation.
       For concentration or flux clamp the orientation specifies on which side  
       will be the concentration held 
       (UP is front or outside, DOWN is back or inside, and DEFAULT, ANY or NONE is on both sides).
       The complex pattern must not have any compartment.
       
  - name: concentration
    type: float
    default: unset
    doc: |
       Specifies concentration when type is SurfacePropertyType.CLAMP_CONCENTRATION or 
       SurfacePropertyType.CLAMP_FLUX. Represents concentration of the imagined opposide side 
       of the wall that has this concentration or flux clamped.
       
    
SurfaceClass:
  doc: Defining a surface class allows surfaces to behave like species (in a limited way).
  superclass: SurfaceProperty
  items:
  - name: name
    type: str
    doc: Name of the surface class
    
  - name: properties
    type: List[SurfaceProperty*]
    default: empty
    doc: | 
      A surface class can either have a list of properties or just one property.
      In the usual case of having one property, one can set the attributes 
      type, affected_species, etc. inherited from SurfaceProperty directly.


ReactionRule:    
  superclass: BaseDataClass
  items:
  - name: name
    type: str
    default: unset
    doc: | 
      Name of the reaction. If this is a reversible reaction, then it is the name of the 
      reaction in forward direction.
    
  - name: reactants
    type: List[Complex*]
    default: empty # must be set, but C++ ordering of arguments requires that all defaults are at the end
    
  - name: products
    type: List[Complex*]
    default: empty
    
  - name: fwd_rate
    type: float
    default: unset # must be set, but C++ ordering of arguments requires that all defaults are at the end
    doc: |
      Rates have following units\: unimolecular [s^-1], volume bimolecular [M^-1*s^-1], 
      The units of the reaction rate for uni- and bimolecular reactions are
        * [s^-1] for unimolecular reactions,
        * [M^-1*s^-1] for bimolecular reactions between either two volume molecules, a volume molecule 
                      and a surface (molecule), 
        * [um^2*N^-1*s^-1] bimolecular reactions between two surface molecules on the same surface, and
        * [N^-1*s^-1] bimolecular reactions between two surface molecules on different objects 
          (this is a highly experimental feature and the unit will likely change in the future, 
           not sure if probability is computed correctly, it works the way that the surface molecule 
           is first diffused and then a potential collisions within the distance of Config.intermembrane_interaction_radius
           are evaluated). 
      Here, M is the molarity of the solution and N the number of reactants.
      May be changed after model initialization. 
      Setting of value is ignored if the rate does not change. 
      If the new value differs from previous, updates all information related 
      to the new rate including recomputation of reaction times for molecules if this is a
      unimolecular reaction.
    
  - name: rev_name
    type: str
    default: unset
    doc: Name of the reaction in reverse direction.   
    
  - name: rev_rate
    type: float
    default: unset
    doc: |
      Reverse reactions rate, reaction is unidirectional when not specified.
      May be changed after model initialization, in the case behaves the same was as for 
      changing the 'fwd_rate'. 
    
  - name: variable_rate
    type: List[List[float]]
    default: empty
    doc: | 
      Variable rate is applicable only for irreversible reactions. Members fwd_rate and rev_rate 
      must not be set. The array passed as this argument must have as its items a pair of floats (time, rate).     

  - name: is_intermembrane_surface_reaction
    type: bool
    default: false
    doc: |
      Experimental, see addintinal explanation in 'fwd' rate.
      Then set to true, this is a special type of surface-surface reaction that 
      allows for two surface molecules to react when they are on different geometrical objects. 
      This support is limited for now, the reaction rule must be in the form of A + B -> C + D 
      where all reactants and products must be surface molecules and 
      their orientation must be 'any' (default). 
    todo: not sure whether we should allow this rxn also for standard surf-surf rxns  

  methods:
  - name: to_bngl_str
    return_type: str
    doc: Creates a string that corresponds to the reaction rule's BNGL representation, does not contain rates.     
    is_const: true 
  
Subsystem:
  items:
  - name: species
    type: List[Species*]
    default: empty
    
  - name: reaction_rules
    type: List[ReactionRule*]
    default: empty

  - name: surface_classes
    type: List[SurfaceClass*]
    default: empty    
    
  - name: elementary_molecule_types
    type: List[ElementaryMoleculeType*]
    default: empty
    doc: | 
      Used mainly when a BNGL file is loaded, if BNGL species is defined through 
      Python API, this array is populated automatically 
    
  methods:
  - name: add_species
    params:
    - name: s
      type: Species*
      
  - name: find_species
    return_type: Species*
    params:
    - name: name
      type: str
      
  - name: add_reaction_rule
    params:
    - name: r
      type: ReactionRule*
      
  - name: find_reaction_rule  
    return_type: ReactionRule*
    params:
    - name: name
      type: str

  - name: add_surface_class
    params:
    - name: sc
      type: SurfaceClass*
      
  - name: find_surface_class  
    return_type: SurfaceClass*
    params:
    - name: name
      type: str      
      
  - name: add_elementary_molecule_type
    params:
    - name: mt
      type: ElementaryMoleculeType*
      
  - name: find_elementary_molecule_type  
    return_type: ElementaryMoleculeType*
    params:
    - name: name
      type: str            
      
  - name: load_bngl_molecule_types_and_reaction_rules
    doc: | 
      Parses a BNGL file and only reads molecule types and
      reaction rules sections, e.g. ignores observables. 
      Parameter values are evaluated and the result value 
      is directly used.  
      Compartments names are stored in rxn rules as strings because
      compartments belong to geometry objects and the subsystem is independent
      on specific geometry.
      However they must be defined on initialization.
       
    params:
    - name: file_name
      type: str      
      
    - name: parameter_overrides
      type: Dict[str, float]
      default: empty
      
Region:
  superclass: BaseDataClass
  doc: Represents region construted from 1 or more multiple, usually unnamed? 
  items:
  - name: node_type
    type: RegionNodeType
    default: RegionNodeType.UNSET
    doc: | 
      When this values is LeafGeometryObject, then this object is of class GeometryObject,
      when LeafSurfaceRegion, then it is of class SurfaceRegion.

  - name: left_node
    type: Region*
    default: unset
    doc: Internal, when node_type is not Leaf, this is the left operand 

  - name: right_node
    type: Region*
    default: unset
    doc: Internal, when node_type is not Leaf, this is the right operand 
    
  methods:
  - name: __add__
    doc: Computes union of thwo regions 
    internal: Maybe add these explicitly named  
    return_type: Region*
    params:
    - name: other
      type: Region* 
          
  - name: __sub__
    return_type: Region*
    params:
    - name: other
      type: Region* 

  - name: __mul__
    return_type: Region*
    params:
    - name: other
      type: Region* 
    
    
SurfaceRegion:
  superclass: Region
  doc: |
    Surface region  in MDL, however a new class Region was instroduced in MCell4 so it was renamed 
    to avoid confusion.
  items:
  - name: name
    type: str
    
  - name: wall_indices
    type: List[int]
    doc: |
      Surface region must be a part of a GeometryObject, items in this list are indices to 
      its wall_list array

  - name: surface_class
    type: SurfaceClass*
    default: unset
    doc: Has higher priority than the parent geometry object's surface class.

  - name: initial_surface_releases
    type: List[InitialSurfaceRelease*]
    default: empty
    doc: |
      Equivalent to MDL's MODIFY_SURFACE_REGIONS/MOLECULE_DENSITY or MOLECULE_NUMBER,
      each item defines either density or number of molecules to be released on this surface 
      regions when simulation starts. 
    

# TODO: should be accessible from SurfaceRegion, add it 
# due to issues with shared pointer casts, it was not possible to make a shared pointer out of this     
# any cast resulted into bad_weak_ptr exception
# 
#  - name: parent
#    type: GeometryObject*
#    default: unset
#    doc: Do not set this directly, set when a GeometryObject is constructed 
    

GeometryObject:
  superclass: Region
  items:
  - name: name
    type: str
    doc: | 
       Name of the object. Also represents BNGL compartment name if 'is_bngl_compartment' is True.

  - name: vertex_list
    type: List[List[float]]
    doc: | 
      List of [x,y,z] triplets specifying positions of individual vertices.
      Equivalent to List[Vec3] however, defining a constructor Vec3(List[float]) then 
      tries to convert all lists of floats to Vec3 
        
  # what about name, use a different one?
  - name: wall_list
    type: List[List[int]]
    doc: | 
      List of [a,b,c] triplets specifying each wall, individual values are indices into the vertex list.
      Equivalent to List[IVec3]. 

  - name: is_bngl_compartment
    type: bool
    default: false

  - name: surface_compartment_name
    type: str
    default: unset

  - name: surface_regions
    type: List[SurfaceRegion*]
    default: empty
    
  - name: surface_class
    type: SurfaceClass*
    default: unset
    doc: |
      Surface class for the whole object's surface. It is applied to the whole surface of this object 
      except for those surface regions that have their specific surface class set explicitly.
    internal: Shouldn't we be inheriting this from Region? 

  - name: initial_surface_releases
    type: List[InitialSurfaceRelease*]
    default: empty
    doc: |
      Equivalent to MDL's MODIFY_SURFACE_REGIONS/MOLECULE_DENSITY or MOLECULE_NUMBER,
      each item defines either density or number of molecules to be released on this surface 
      regions when simulation starts.
    internal: Shouldn't we be inheriting this from Region?
    
  methods:
  - name: translate
    doc: Move object by a specified vector, must be done before model initialization.
    params:
    - name: move
      type: List[float]
    

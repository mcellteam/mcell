Model:
  superclasses: [Subsystem, InstantiationData, Observables]
  
  items:
  - name: config
    type: Config
    default: Config()

  - name: warnings
    type: Warnings
    default: Warnings()

  - name: notifications
    type: Notifications
    default: Notifications()
    
  methods:
  - name: initialize

  - name: run_iterations
    params:
    - name: iterations
      type: float
      doc: Number of iterations to run. Value is truncated to an integer.

  - name: end_simulation
    doc: |
      Generates the last visualization and reaction output (if they were defined), then
      flushes all buffers and optionally prints simulation report. 
      Buffers are also flushed when the Model object is destroyed.   
    params:
    - name: print_final_report
      type: bool
      default: True
      
  - name: add_subsystem
    params:
    - name: subsystem
      type: Subsystem*
      
  - name: add_instantiation_data
    params:
    - name: instantiation_data
      type: InstantiationData*

  - name: add_observables
    params:
    - name: observables
      type: Observables*
      
  - name: dump_internal_state
    todo: all 'with' geometry option 
    doc: Prints out the simulation engine's internal state, mainly for debugging.      
      
  - name: export_data_model
    doc: | 
      If file is not set, then uses the first VizOutput to determine the target directory 
      and creates name using the current iteration. Fails if argument file is not set and there is no VizOutput.
      Must be called after initialization.
      Always exports the current state, i.e. with the current . 
      Events (ReleaseSites and VizOutputs) with scheduled time other than zero cannot be imported correectly yet.  
    params: 
    - name: file
      type: str
      default: unset
        
  - name: export_viz_data_model
    doc: Same as export_data_model, only the created data model will contain only information required for visualization
     in CellBlender. This makes the loading ofthemodel by CellBlender faster and also allows to avoid potential
     compatibility issues. 
    params: 
    - name: file
      type: str
      default: unset
     
  # --- state modification ---
  - name: release_molecules
    doc: | 
       Performs immediate release based on the definition of the release site argument.
       The ReleaseSite.release_time must not be in the past and should be withing the current iteration.
       The ReleaseEvent must not use a release_pattern because this is an immediate release and it is not 
       scheduled into the global scheduler. 
       
    params:
    - name: release_site
      type: ReleaseSite*
    
  # --- introspection ---

  # TODO: can we make some faster interface? however, we do not want to be bound to 
  # the internal implementation and we must abstract away the partitions      
  - name: get_molecule_ids
    doc: | 
      Returns a list of ids of molecules of given Species existing in the simulated environment,
      if the argument species is not set, returns list of all molecules.      
    return_type: List[int]
    params:
    - name: species
      type: Species*
      default: unset
  
  - name: get_molecule
    doc: Returns a molecule from the simulated environment, None if the molecule does not exist 
    return_type: Molecule*
    params: 
    - name: id
      type: int
  
  # --- geometry ---
  - name: get_vertex
    doc: Returns coordinates of a vertex.
    return_type: Vec3 
    params:
    - name: object
      type: GeometryObject*
    - name: vertex_index
      type: int 
      doc: This is the index of the vertex in object's walls (wall_list).
      
  - name: get_wall
    doc: Returns information about a wall belonging to a given object.
    return_type: Wall* 
    params:
    - name: object
      type: GeometryObject*
    - name: wall_index
      type: int 
      doc: This is the index of the wall in object's walls (wall_list).
      
  - name: get_vertex_unit_normal
    doc: | 
       Returns sum of all wall normals that use this vertex converted to a unit vector of length 1um.
       This represents the unit vector pointing outwards from the vertex.
    return_type: Vec3
    params:
    - name: object
      type: GeometryObject*
    - name: vertex_index
      type: int 
      doc: This is the index of the vertex in object's vertex_list.

  - name: get_wall_unit_normal
    doc: Returns wall normal converted to a unit vector of length 1um.
    return_type: Vec3
    params:
    - name: object
      type: GeometryObject*
    - name: wall_index
      type: int 
      doc: This is the index of the vertex in object's walls (wall_list).
    
  # --- dynamic geometry ---
      
  - name: add_vertex_move
    doc: Adds a displacement for given object's vertex, only stored until apply_vertex_moves is called
    params: 
    - name: object
      type: GeometryObject*
      doc: Object whose vertex will be changed
    - name: vertex_index
      type: int
      doc: Index of vertex in object's vertex list that will be changed
    - name: displacement
      type: Vec3
      doc: Change of vertex coordinates (in um), will be added to the current coordinates of the vertex 
      
  - name: apply_vertex_moves
    doc: | 
       Applies all the vertex moves specified with add_vertex_move call.
       Walls of different objects are checked against collisions and move the maximal way so that they do not 
       overlap. (the current pllementation is a bit basic and may not work 100% correctly) 
       When collect_wall_wall_hits is True, a list of wall pairs that collided is returned,
       when collect_wall_wall_hits is False, and empty list is returned.
    return_type: List[WallWallHitInfo*]
    params:
    - name: collect_wall_wall_hits
      type: bool
      default: false
      doc: |
         When set to True, a list of wall pairs that collided is returned,
         otherwise an empty list is returned.
  
  # --- callbacks ---
  
  - name: register_mol_wall_hit_callback
    doc: There can be currently only a single wall hit callback registered.
    params:
    - name: function
      type: std::function<void(std::shared_ptr<MolWallHitInfo>, py::object)>
      doc: | 
         Callback function to be called. 
         It must have two arguments MolWallHitInfo and context.
      internal: Use a more abstract format to define function type 

    - name: context
      type: py::object
      doc: | 
         Context passed to the callback function, the callback function can store
         information to this object. Some context must be always passed, even when 
         it is a useless python object. 
     
    - name: object
      type: GeometryObject*
      default: unset
      doc: Only hits of this object will be reported, any object hit is reported when not set.
      internal: Extend this to Region later
      
    - name: species
      type: Species*
      default: unset
      doc: Only hits of molecules of this species will be reported, any species hit is reported when not set.
      
      
  - name: register_reaction_callback
    doc: | 
       Allows to intercept unimolecular and bimolecular reactions happening in volume.
       It is allowed to do state modifications except for removing reacting molecules.  
    params: 
    - name: function
      type: std::function<void(std::shared_ptr<ReactionInfo>, py::object)>
      doc: | 
         Callback function to be called. 
         It must have two arguments ReactionInfo and context.
         Called when it is decided that the reaction will happen.
         After return the reaction proceeds as it would without a callback. 
         
    - name: context
      type: py::object
      doc: | 
         Context passed to the callback function, the callback function can store
         information to this object. Some context must be always passed, even when 
         it is a useless python object. 
      internal: |
         In the future, One may set attributes of ReactionInfo to say how the reaction should proceed. 
         If unchanged, reaction proceeds as it woudl without this callback. 
         
    - name: reaction_rule
      type: ReactionRule*
      internal: maybe also add filtering by species
      doc: The callback function will be called whenever is this reaction rule applied.
          
  # --- other ---
  
  - name: load_bngl
    doc: | 
      Loads sections\: molecule types, reaction rules, seed species, and observables from a BNGL file
      and creates objects in the current model according to it.
      All elementary molecule types used in the seed species section must be defined in subsystem.
      If an item in the seed species section does not have its compartment set,
      the argument default_region must be set and the molecules are released into or onto the 
      default_region. 
    params:
    - name: file_name
      type: str  
      
    - name: observables_files_prefix
      type: str
      default: ""
      doc: Prefix to be used when creating files with observable values. 
      
    - name: default_release_region
      type: Region*
      default: unset
      
    - name: parameter_overrides
      type: Dict[str, float]
      default: empty
      
  - name: export_to_bngl
    doc: |
      Exports all defined species, reaction rules and applicable observables
      as a BNGL file. 
      Limited currrently to exactly one volume compartment and volume reactions.
    params:
    - name: file_name
      type: str
      doc: Output file name.
      
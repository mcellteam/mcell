Model:
  superclasses: [Subsystem, InstantiationData, Observables]
  
  items:
  - name: config
    type: Config
    default: Config()

  - name: warnings
    type: Warnings
    default: Warnings()

  - name: notifications
    type: Notifications
    default: Notifications()
    
  methods:
  - name: initialize

  - name: run_iterations
    params:
    - name: iterations
      type: long

  - name: end_simulation
    doc: |
      Generates the last visualization and reaction output (if they were defined), then
      flushes all buffers and optionally prints simulation report. 
      Buffers are also flushed when the Model object is destroyed.   
    params:
    - name: print_final_report
      type: bool
      default: True
      
  - name: add_subsystem
    params:
    - name: subsystem
      type: Subsystem*
      
  - name: add_instantiation_data
    params:
    - name: instantiation_data
      type: InstantiationData*

  - name: add_observables
    params:
    - name: observables
      type: Observables*
      
  - name: dump_internal_state
    doc: Prints out the simulation engine's internal state, mainly for debugging.      
      
  - name: export_data_model
    doc: | 
      If file is not set, then uses the first VizOutput to determine the target directory 
      and creates name using the cutrrent iteration. Fails if argument file is not set and there is no VizOutput.
      Must be called after initialization.
      Always exports the current state, i.e. with the current . 
      Events (ReleaseSites and VizOutputs) with scheduled time other than zero cannot be imported correectly yet.  
    params: 
    - name: file
      type: str
      default: unset

    - name: only_for_visualization
      type: bool
      default: false
      doc: |
        The created data model will contain only information required for visualization in CellBlender.
        This makes the loading ofthemodel by CellBlender faster and also allows to avoid potential 
        compatibility issues. 

  # TODO: can we make some faster interface? however, we do not want to be bound to 
  # the internal implementation and we must abstract away the partitions      
  - name: get_molecule_ids
    doc: | 
      Returns a list of ids of molecules of given Species existing in the simulated environment,
      if the argument species is not set, returns list of all molecules.      
    return_type: List[int]
    params:
    - name: species
      type: Species*
      default: unset
  
  - name: get_molecule
    doc: Returns a molecule from the simulated environment, None if the molecule does not exist 
    return_type: Molecule*
    params: 
    - name: id
      type: int
      
#  - name: load_bngl
#    doc: | 
#      Loads sections: molecule types, reaction rules, seed species, and observables from a BNGL file
#      and creates objects in the current model according to it.
#      All elementary molecule types used in the seed species section must be defined in subsystem.
#      If an item in the seed species section does not have its compartment set,
#      the argument default_region must be set and the molecules are released into or onto the 
#      default_region. 
#    params:
#    - name: file_name
#      type: str  
#    - name: default_release_region
#      type: Region*
#      default: unset

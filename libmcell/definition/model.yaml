Model:
  superclasses: [Subsystem, InstantiationData, Observables]
  
  items:
  - name: config
    type: Config
    default: Config()

  - name: warnings
    type: Warnings
    default: Warnings()

  - name: notifications
    type: Notifications
    default: Notifications()
    
  methods:
  - name: initialize

  - name: run_iterations
    params:
    - name: iterations
      type: long

  - name: end_simulation
    doc: |
      Generates the last visualization and reaction output (if they were defined), then
      flushes all buffers and optionally prints simulation report. 
      Buffers are also flushed when the Model object is destroyed.   
    params:
    - name: print_final_report
      type: bool
      default: True
      
  - name: add_subsystem
    params:
    - name: subsystem
      type: Subsystem*
      
  - name: add_instantiation_data
    params:
    - name: instantiation_data
      type: InstantiationData*

  - name: add_observables
    params:
    - name: observables
      type: Observables*
      
  - name: dump_internal_state
    doc: Prints out the simulation engine's internal state, mainly for debugging.      
      
  - name: export_data_model
    doc: | 
      If file is not set, then uses the first VizOutput to determine the target directory 
      and creates name using the current iteration. Fails if argument file is not set and there is no VizOutput.
      Must be called after initialization.
      Always exports the current state, i.e. with the current . 
      Events (ReleaseSites and VizOutputs) with scheduled time other than zero cannot be imported correectly yet.  
    params: 
    - name: file
      type: str
      default: unset
        
  - name: export_viz_data_model
    doc: Same as export_data_model, only the created data model will contain only information required for visualization
     in CellBlender. This makes the loading ofthemodel by CellBlender faster and also allows to avoid potential
     compatibility issues. 
    params: 
    - name: file
      type: str
      default: unset
     
  
  # --- introspection ---

  # TODO: can we make some faster interface? however, we do not want to be bound to 
  # the internal implementation and we must abstract away the partitions      
  - name: get_molecule_ids
    doc: | 
      Returns a list of ids of molecules of given Species existing in the simulated environment,
      if the argument species is not set, returns list of all molecules.      
    return_type: List[int]
    params:
    - name: species
      type: Species*
      default: unset
  
  - name: get_molecule
    doc: Returns a molecule from the simulated environment, None if the molecule does not exist 
    return_type: Molecule*
    params: 
    - name: id
      type: int
  
  # --- dynamic geometry ---
      
  - name: add_vertex_move
    doc: Adds a displacement for given object's vertex, only stored until apply_vertex_moves is called
    params: 
    - name: object
      type: GeometryObject*
      doc: Object whose vertex will be changed
    - name: index
      type: int
      doc: Index of vertex in object's vertex list that will be changed
    - name: displacement
      type: Vec3
      doc: Change of vertex coordinates (in um), will be added to the current coordinates of the vertex 
      
  - name: apply_vertex_moves
    doc: Applies all the vertex moves specified with add_vertex_move call  
  
  # --- callbacks ---
  
  - name: register_wall_hit_callback
    doc: There can be currently only a single wall hit callback registered.
    params:
    - name: function
      type: std::function<void(std::shared_ptr<WallHitInfo>, py::object)>
      doc: | 
         Callback function to be called. 
         It must have two arguments WallHitInfo and context.
      internal: Use a more abstract format to define function type 

    - name: context
      type: py::object
      doc: | 
         Context passed to the callback function, the callback function can store
         information to this object. Some context must be always passed, even when 
         it is a useless python object. 
     
    - name: object
      type: GeometryObject*
      default: unset
      doc: Only hits of this object will be reported, any object hit is reported when not set.
      internal: Extend this to Region later
      
    - name: species
      type: Species*
      default: unset
      doc: Only hits of molecules of this species will be reported, any species hit is reported when not set.
      
  
#  - name: load_bngl
#    doc: | 
#      Loads sections: molecule types, reaction rules, seed species, and observables from a BNGL file
#      and creates objects in the current model according to it.
#      All elementary molecule types used in the seed species section must be defined in subsystem.
#      If an item in the seed species section does not have its compartment set,
#      the argument default_region must be set and the molecules are released into or onto the 
#      default_region. 
#    params:
#    - name: filename
#      type: str  
#    - name: default_release_region
#      type: Region*
#      default: unset

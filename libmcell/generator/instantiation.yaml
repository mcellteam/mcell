Region:
  superclass: BaseDataClass
  doc: Represents region construted from 1 or more multiple, usually unnamed? 
  items:
  - name: node_type
    type: RegionNodeType
    default: RegionNodeType.Unset
    doc: | 
      When this values is LeafGeometryObject, then this object is of class GeometryObject,
      when LeafSurfaceRegion, then it is of class SurfaceRegion.

  - name: left_node
    type: Region*
    default: unset
    doc: Internal, when node_type is not Leaf, this is the left operand 

  - name: right_node
    type: Region*
    default: unset
    doc: Internal, when node_type is not Leaf, this is the right operand 
    
  methods:
  - name: __add__
    doc: Computes union of thwo regions 
    internal: Maybe add these explicitly named  
    return_type: Region*
    params:
    - name: other
      type: Region* 
          
  - name: __sub__
    return_type: Region*
    params:
    - name: other
      type: Region* 

  - name: __mul__
    return_type: Region*
    params:
    - name: other
      type: Region* 
    
    
SurfaceRegion:
  superclass: Region
  doc: |
    Surface region  in MDL, however a new class Region was instroduced in MCell4 so it was renamed 
    to avoid confusion.
  items:
  - name: name
    type: str
    
  - name: wall_indices
    type: List[int]
    doc: |
      Surface region must be a part of a GeometryObject, items in this list are indices to 
      its element_connections array

  - name: surface_class
    type: SurfaceClass*
    default: unset
    doc: Has higher priority than the parent geometry object's surface class.


# TODO: due to issues with shared pointer casts, it was not possible to make a shared pointer out of this     
# any cast resulted into bad_weak_ptr exception
#  - name: parent
#    type: GeometryObject*
#    default: unset
#    doc: Do not set this directly, set when a GeometryObject is constructed 
    

GeometryObject:
  superclass: Region
  items:
  - name: name
    type: str
    doc: Name of the object

  - name: vertex_list
    type: List[List[float]]
    doc: | 
      List of [x,y,z] triplets specifying positions of individual vertices.
      Equivalent to List[Vec3] however, defining a constructor Vec3(List[float]) then 
      tries to convert all lists of floats to Vec3 
        
  # what about name, use a different one?
  - name: element_connections
    type: List[List[int]]
    doc: | 
      List of [a,b,c] triplets specifying each wall, individual values are indices into the vertex list.
      Equivalent to List[IVec3]. 
        
  - name: surface_regions
    type: List[SurfaceRegion*]
    default: empty
    
  - name: surface_class
    type: SurfaceClass*
    default: unset
    doc: |
      Surface class for the whole object's surface. It is applied to the whole surface of this object 
      except for those surface regions that have their specific surface class set explicitly.


ReleaseSite:
  superclass: BaseDataClass
  items:
  - name: name
    type: str
    doc: Name of the release site
    
  - name: species
    type: Species* # Species must have beemn defined before
    doc: | 
      The named molecule is the one that will be released. Not used for  the 'list' shape. You must specify an orientation 
      if the molecule is a surface molecule.

  - name: initial_orientation
    type: Orientation
    default: Orientation.None
    doc: |
      Must be set if the species represent surface molecules.

  - name: shape
    type: Shape
    default: Shape.Unset
    
  - name: region
    type: Region*
    default: unset
    doc: Sets shape to Shape.RegionExpr. 

  - name: location
    type: Vec3 # Vec3 and Vec2 are built-in data types
    default: unset # null is equivalent to None in YAML
    
  - name: site_diameter
    type: float
    default: 0
    doc: |
      For a geometrical release site, this releases molecules uniformly within
      a radius r. Not used for releases on regions.
    
  # do we need radius when we have diameter?
  - name: site_radius
    type: float
    default: unset
    doc: |
      For a geometrical release site, this releases molecules uniformly within
      a radius r. Not used for releases on regions.

  - name: number_to_release
    type: int
    default: unset
    
  - name: release_probability
    type: float
    default: unset


InstantiationData:
  items:
  - name: release_sites
    type: List[ReleaseSite*]
    default: empty
    
  - name: geometry_objects
    type: List[GeometryObject*]
    default: empty

  methods:
  - name: add_release_site
    doc: Makes a copy of the release site
    params:
    - name: s
      type: ReleaseSite*
      
  - name: find_release_site
    return_type: ReleaseSite*
    params:
    - name: name
      type: str
      
  - name: add_geometry_object
    doc: Makes a copy of the geometry object, in the future we will probably add some transformations
    params:
    - name: o
      type: GeometryObject*

    - name: name
      type: str
      default: ""
      doc: When name is not set, the name of the object is used
      
  - name: find_geometry_object
    return_type: GeometryObject*
    params:
    - name: name
      type: str          